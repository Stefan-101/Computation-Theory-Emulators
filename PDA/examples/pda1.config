#############################################################################
#                                                                           #
# PDA Example                                                               #
# The PDA accepts all strings of form (0^n 1^n @); n >= 0                   #
# Example: 0 0 1 1 @ (letters are separated by a space)                     #
# The @ symbol is used to mark the end of the input string (in order to     #
# keep the PDA deterministic)                                               #
#                                                                           #
# It has the following sections:                                            #
#                                                                           #
# InputSigma  - input alphabet                                              #
# StackSigma  - stack alphabet (letters that can be pushed onto the stack); #
#               $ is the bottom of the stack symbol and doesn't need to     #
#               be explicitly defined in the config file                    #
# States -  set of states                                                   #
# Start  -  start state                                                     #
# Final  -  set of final states                                             #
# Delta  -  tranzition function                                             #
#                                                                           #
# Elements from each section are separated with a new line (i.e letters,    #
# states, rules)                                                            #
#                                                                           #
#############################################################################

InputSigma:  # alphabet of letters for the input
    0
    1
    @
StackSigma: # alphabet of letters for the stack
    0
    1
    $
States: # set of states
    q1
    q2
    q3
Start:  # start state
    q1
Final:  # set of final states
    q3
Delta:
    # set of rules for the delta function
    # a rule is a 5-tuple: (state1, inputLetter, stackLetter, state2, stackOutputLetter)
    # the rule resembles a tranzition: (state1, letter, top_of_the_stack) -> (state2, letter_to_push_to_stack)
    #
    # i.e. the rule reads a letter and pops an element from the stack; considering its current state
    # it outputs the new state and a letter to push on the stack 

    q1,0,epsilon,q1,0
    q1,1,0,q2,epsilon
    q2,1,0,q2,epsilon
    q2,@,$,q3,epsilon
    